using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;


using Emgu.CV;
using Emgu.CV.UI;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV.VideoSurveillance;
using System.Threading;
using System.Runtime.InteropServices;
using System.Drawing.Imaging;
using System.Diagnostics;




//导入JAI的引用
using Jai_FactoryDotNET;

//导入flycapture的引用
using System.Diagnostics;   
using FlyCapture2Managed;
using FlyCapture2Managed.Gui;

//分割字符串
using System.Text.RegularExpressions;



namespace SimpleImageDisplaySample
{




    public partial class Form1 : Form,ILog,IDisposable
    {
        
        



        /**********calib__init************/
        public static double fc1, fc2, cc1, cc2, R11, R12, R13, R21, R22, R23, T1, T2, T3, s;
        
        
        
        /************JAI*********************/
        /******* Main factory object********/
        CFactory myFactory = new CFactory();

        // Opened camera obejct
        CCamera myCamera1;
        CCamera myCamera2;
       

        public int number1;
        public int number2;

        /******FLY*********/
        /***Fly--define****/
        /**represents a dialog that provides a graphical interface to a specified camera****/
        private FlyCapture2Managed.Gui.CameraControlDialog m_camCtlDlg;  

       
        private ManagedCameraBase m_camera = null;
       
        private ManagedImage m_rawImage;
        private ManagedImage m_processedImage;
        private bool m_grabImages;
        private AutoResetEvent m_grabThreadExited;
        private BackgroundWorker m_grabThread;

        /***********Modbus--Tcp*********/
        private ModBusWrapper Wrapper = null;


        public Form1 ()
        {
            
            InitializeComponent();

            //Size size = new Size(1392, 1392);  //第一个参数是宽度，第二个参数是高度

            //this.Size = size;

            /*********************Modbus--TCP*****************/
            this.Wrapper = ModBusWrapper.CreateInstance(Protocol.TCPIP);
            this.Wrapper.Logger = this;
            /*********************Modbus--TCP*****************/
            
            /***************Fly__init*************/
            m_rawImage = new ManagedImage();
            m_processedImage = new ManagedImage();
            m_camCtlDlg = new CameraControlDialog();

            m_grabThreadExited = new AutoResetEvent(false);

            /*************JAI__init***************/
            Jai_FactoryWrapper.EFactoryError error = Jai_FactoryWrapper.EFactoryError.Success;

            // Open the factory with the default Registry database
            error = myFactory.Open("");

            // Search for cameras and update all controls
            SearchButton_Click(null, null);
           
        }


        /*********FLY--UpdateUI**********/
        private void UpdateUI(object sender, ProgressChangedEventArgs e)
        {
          
            pictureBox3.Image = m_processedImage.bitmap;
            pictureBox3.Invalidate();
        }



        /*********FLY--Form1_Load********/
        private void Form1_Load(object sender, EventArgs e)
        {

            Hide();
            CameraSelectionDialog camSlnDlg = new CameraSelectionDialog();
            bool retVal = camSlnDlg.ShowModal();
            if (retVal)
            {
                try
                {
                    ManagedPGRGuid[] selectedGuids = camSlnDlg.GetSelectedCameraGuids();
                    ManagedPGRGuid guidToUse = selectedGuids[0];

                    //rovides the functionality for the user to get an PGRGuid for a desired camera or device easily. 
                    ManagedBusManager busMgr = new ManagedBusManager();
                    InterfaceType ifType = busMgr.GetInterfaceTypeFromGuid(guidToUse);

                    if (ifType == InterfaceType.GigE)
                    {
                        m_camera = new ManagedGigECamera();
                    }
                    else
                    {
                        m_camera = new ManagedCamera();
                    }

                    // Connect to the first selected GUID
                    m_camera.Connect(guidToUse);

                    m_camCtlDlg.Connect(m_camera);

                    CameraInfo camInfo = m_camera.GetCameraInfo();


                    // Set embedded timestamp to on
                    EmbeddedImageInfo embeddedInfo = m_camera.GetEmbeddedImageInfo();
                    embeddedInfo.timestamp.onOff = true;
                    m_camera.SetEmbeddedImageInfo(embeddedInfo);

                    m_camera.StartCapture();

                    m_grabImages = true;
                    StartGrabLoop();

                }
                catch (FC2Exception ex)
                {
                    Debug.WriteLine("Failed to load form successfully: " + ex.Message);
                    Environment.ExitCode = -1;
                    Application.Exit();
                    return;
                }

                toolStripButtonStart.Enabled = false;
                toolStripButtonStop.Enabled = true;
            }
            else
            {
                Environment.ExitCode = -1;
                Application.Exit();
                return;
            }
            
           Show();
          
        }



        /**********Form1_FormClosing********/
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

            for (int i = 0; i < myFactory.CameraList.Count; i++)
            {
                myFactory.CameraList[i].Close();
            }
            myFactory.Close();


            /*******FLY_closing****/
            try
            {
                toolStripButtonStop_Click_1(sender, e);
                m_camera.Disconnect();
            }
            catch (FC2Exception )
            {
                // Nothing to do here
            }
            catch (NullReferenceException )
            {
                // Nothing to do here
            }
        }


        /***********FLY---StartGrabLoop********/
        private void StartGrabLoop()
        {
            m_grabThread = new BackgroundWorker();
            m_grabThread.ProgressChanged += new ProgressChangedEventHandler(UpdateUI);
            m_grabThread.DoWork += new DoWorkEventHandler(GrabLoop);
            m_grabThread.WorkerReportsProgress = true;
            m_grabThread.RunWorkerAsync();
        }

        /***********FLY---GrabLoop********/
        private void GrabLoop(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = sender as BackgroundWorker;

            while (m_grabImages)
            {
                try
                {
                    m_camera.RetrieveBuffer(m_rawImage);
                }
                catch (FC2Exception ex)
                {
                    Debug.WriteLine("Error: " + ex.Message);
                    continue;
                }

                lock (this)
                {
                    m_rawImage.Convert(FlyCapture2Managed.PixelFormat.PixelFormatBgr, m_processedImage);
                }

                worker.ReportProgress(0);
            }

            m_grabThreadExited.Set();
        }



        /******FLY－－－begin******/
        private void toolStripButtonStart_Click(object sender, EventArgs e)
        {
            m_camera.StartCapture();
           
            m_grabImages = true;

            StartGrabLoop();

            toolStripButtonStart.Enabled = false;
            toolStripButtonStop.Enabled = true;
        }
       

        /*********FLY--stop*********/
        private void toolStripButtonStop_Click_1(object sender, EventArgs e)
        {
            m_grabImages = false;

            try
            {
                m_camera.StopCapture();
            }
            catch (FC2Exception ex)
            {
                Debug.WriteLine("Failed to stop camera: " + ex.Message);
            }
            catch (NullReferenceException)
            {
                Debug.WriteLine("Camera is null");
            }

            toolStripButtonStart.Enabled = true;
            toolStripButtonStop.Enabled = false;
        }


        /***********FLY--control*********/
        private void toolStripButtonCameraControl_Click(object sender, EventArgs e)
        {
            if (m_camCtlDlg.IsVisible())
            {
                m_camCtlDlg.Hide();
                toolStripButtonCameraControl.Checked = false;
            }
            else
            {
                m_camCtlDlg.Show();
                toolStripButtonCameraControl.Checked = true;
            }
        }


        /***********Calib********************/
        /*********弹出定标的对话框***********/
        private void toolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            calib cab = new calib();
            cab.Show();
        }


        /********EgiE--begin********/
        private void SearchButton_Click(object sender, EventArgs e)
        {
            Jai_FactoryWrapper.EFactoryError error = Jai_FactoryWrapper.EFactoryError.Success;

            // enable Force IP
            myFactory.EnableAutoForceIP = true;
            // Search for any new cameras using Filter Driver
            myFactory.UpdateCameraList(Jai_FactoryDotNET.CFactory.EDriverType.FilterDriver);

            if (myFactory.CameraList.Count > 0)
            {
                for (int i = 0; i < myFactory.CameraList.Count; i++)
                {
                    string sList = myFactory.CameraList[i].ModelName;
                    camListBox.Items.Add(sList);

                    error = myFactory.CameraList[i].Open();
                }

                StartButton.Enabled = true;
                StopButton.Enabled = true;

                // Open the camera
                myCamera1 = myFactory.CameraList[0];
                myCamera2 = myFactory.CameraList[1];
            }
            else
            {

                MessageBox.Show("No Cameras Found!");

            }

        }



    
        
        private void StartButton_Click(object sender, EventArgs e)
        {

            //this 
            if (myFactory.CameraList[0] != null)
            {
               
                myFactory.CameraList[0].StartImageAcquisition(true, 5, pictureBox1.Handle);
                
            }
            
        
            if (myFactory.CameraList[1] != null)
            {
                myFactory.CameraList[1].StartImageAcquisition(true, 5, pictureBox2.Handle);
            }

            StartButton.Enabled = false;
            StopButton.Enabled = true;
            SearchButton.Enabled = true;
        }

        public void button_circle_Click(object sender, EventArgs e)
        {
            //Jai_FactoryWrapper.EFactoryError error = Jai_FactoryWrapper.EFactoryError.Success;
            
            Console.WriteLine("1");

            //Bitmap img = new Bitmap(400, 400);
            //img.Save(".\\saveimg" + ".bmp");
            myFactory.CameraList[0].SaveNextFrame(".\\saveimg"+".bmp");
            ImageProcess();
           
        }

        /* Image img = Properties.Resources.Form3_PIC_00;  //只能是system.drawing.image能读入，Mat和emgu的image读不了
            Bitmap bmpImage = new Bitmap(img); //这是关键，国外网站看到的
            Emgu.CV.Image<Bgr, Byte> currentFrame = new Emgu.CV.Image<Bgr, Byte>(bmpImage);  //只能这么转
       
            Mat invert = new Mat();
             CvInvoke.BitwiseAnd(currentFrame, currentFrame, invert);  //这是官网上的方法，变通用。没看到提供其它方法直接转换的。
         */

        private void ImageProcess( )
        {
            ///*111111111111111111--canny*/
            Image<Bgr, Byte> image1 = new Image<Bgr, Byte>(".\\saveimg" + ".bmp");
            Image<Gray, Byte> grayImage = image1.Convert<Gray, Byte>();
            double cannyThreshold = 250.0;
            double circleAccumulatorThreshold =55;
            #region Find circles
            /*检测圆形*/
           
            CircleF[] circles = grayImage.HoughCircles(
                new Gray(cannyThreshold),
                new Gray(circleAccumulatorThreshold),
                2.0, //Resolution of the accumulator used to detect centers of the circles
                grayImage.Width, //min distance 
                20, //min radius
                0 //max radius
                )[0]; //Get the circles from the first channel
            //CircleF[] circles = grayImage.HoughCircles(new Gray(250), new Gray(74.471), 1.0, grayImage.Width,0, 0)[0];//第二个参数
            /*在原图上画圆*/
           // Image<Bgr, Byte> imageLines = new Image<Bgr, Byte>(".\\saveimg" + ".bmp"); 
           // foreach (CircleF circle in circles)
           // {
            //    imageLines.Draw(circle, new Bgr(Color.Red), 2);
                /*输出圆的圆心*/
                //Console.WriteLine(circle.Center);
           // }
            #endregion

            #region Canny and edge detection
            
            double cannyThresholdLinking = 200.0;
            Image<Gray, Byte> cannyEdges = grayImage.Canny(cannyThreshold, cannyThresholdLinking);
            LineSegment2D[] lines = cannyEdges.HoughLinesBinary(
                1, //Distance resolution in pixel-related units
                Math.PI / 90.0, //Angle resolution measured in radians.
                20, //threshold
                30, //min Line width
                10 //gap between lines
                )[0]; //Get the lines from the first channel
            #endregion
            #region Find triangles and rectangles
            
            List<Triangle2DF> triangleList = new List<Triangle2DF>();
            List<MCvBox2D> boxList = new List<MCvBox2D>(); //a box is a rotated rectangle

            
            
            using (MemStorage storage = new MemStorage()) //allocate storage for contour approximation
                for (
                   Contour<Point> contours = cannyEdges.FindContours(
                      Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE,
                      Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST,
                      storage);
                   contours != null;
                   contours = contours.HNext)
                {
                    Contour<Point> currentContour = contours.ApproxPoly(contours.Perimeter * 0.04, storage);//注意这里的The desired approximation accuracy为0.04

                    if (currentContour.Area > 4300) //only consider contours with area greater than 250
                    {
                        if (currentContour.Total == 3) //The contour has 3 vertices, it is a triangle
                        {
                            Point[] pts = currentContour.ToArray();
                            triangleList.Add(new Triangle2DF(
                               pts[0],
                               pts[1],
                               pts[2]
                               ));
                            
                        }
                       
                        else if (currentContour.Total == 4) //The contour has 4 vertices.
                        {
                            #region determine if all the angles in the contour are within [80, 100] degree
                            bool isRectangle = true;
                            Point[] pts = currentContour.ToArray();
                            LineSegment2D[] edges = PointCollection.PolyLine(pts, true);

                            for (int i = 0; i < edges.Length; i++)
                            {
                                double angle = Math.Abs(
                                   edges[(i + 1) % edges.Length].GetExteriorAngleDegree(edges[i]));
                                if (angle < 80 || angle > 100)
                                {
                                    isRectangle = false;
                                    break;
                                }
                            }
                            #endregion
                            if (isRectangle) boxList.Add(currentContour.GetMinAreaRect());
                        }
                      
                       
                    }
                }
            #endregion

            
            #region draw triangles and rectangles and pentagon
            Image<Bgr, Byte> triangleRectangleImage = new Image<Bgr, Byte>(".\\saveimg" + ".bmp");
            foreach (Triangle2DF triangle in triangleList)
            {
                triangleRectangleImage.Draw(triangle, new Bgr(Color.DarkBlue), 2);
                Console.WriteLine("Area Of Triangle :" + triangle.Area);
            }
            foreach (MCvBox2D box in boxList)
            {
                triangleRectangleImage.Draw(box, new Bgr(Color.DarkOrange), 2);
            }
            //foreach (IConvexPolygonF box2 in boxList2)
               // triangleRectangleImage.Draw(box2, new Bgr(Color.DarkOrange), 2);
            // Console.WriteLine("Area Of triagle :" + );

            foreach (CircleF circle in circles)
            {
                triangleRectangleImage.Draw(circle, new Bgr(Color.Red), 2);
                /*输出圆的圆心*/
                Console.WriteLine("Center Of Circle :"+circle.Center);
                Console.WriteLine("Area Of Circle :" + circle.Area);
                Console.WriteLine("Radius Of Circle :" + circle.Radius);
               
            }
           
            #endregion



            //显示结果
            pictureBox_circle.Image = triangleRectangleImage.ToBitmap();
        }

        private void StopButton_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < myFactory.CameraList.Count; i++)
            {
                myFactory.CameraList[i].StopImageAcquisition();
            }

            StartButton.Enabled = true;
            StopButton.Enabled = false;
            SearchButton.Enabled = true;
        }


        /***************************************************************************/
        /***************************************************************************/
        /*********************Modbus----TCP*****************************************/   

        #region ILog 成员
        public void Write(string log)
        {
            this.tbxHistory.AppendText(log + Environment.NewLine);
            this.tbxHistory.Select(this.tbxHistory.TextLength, 0);
            this.tbxHistory.ScrollToCaret();
        }
        #endregion

        private void TestModBus_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.Wrapper.Dispose();
        }
        
        private void btnSend_Click_1(object sender, EventArgs e)
        {
           // string[] x = new string[]{};
           // List<string> a = x.ToList();
            //a = Encoding.ASCII.GetBytes(this.tbxSendText.Text.Trim());
            string str1 = this.tbxSendText.Text.Trim().ToString();
            
            //char[] str2 =str1.ToCharArray();
            string[] f1 = str1.Split(',');

            //float[] position=new float[]{};
            float x, y;
            x = float.Parse(f1[0]);
            y = float.Parse(f1[1]);
            byte[] a = BitConverter.GetBytes(x);
            byte[] b = BitConverter.GetBytes(y);
            byte[] z = new byte[a.Length + b.Length];
            a.CopyTo(z, 0);
            b.CopyTo(z, a.Length);

            System.Console.WriteLine("{0:###.000000}", x);
            System.Console.WriteLine("{0:###.000000}", y);
            this.Wrapper.Send(z);
            //this.Wrapper.Send(BitConverter.GetBytes(y));
            
            
         

            
            /**for (int i = 0; i < str1.Length; i++) {
                //将输入的文本转化为float类型

                position.A = float.Parse(f1[i]);
                this.Wrapper.Send(BitConverter.GetBytes(position[i]));
            }**/
            //float f1=float.Parse(this.tbxSendText.Text.Trim());
            
            //将float类型转化成Byte类型
            //this.Wrapper.Send(BitConverter.GetBytes(position[i]));
            //Console.WriteLine(f);
            
            //this.Wrapper.Send(Encoding.ConvertGetBytes(this.tbxSendText.Text.Trim()));
            // this.Wrapper.Send(Encoding.ASCII.GetBytes(this.tbxSendText.Text.Trim()));
        }

        private void ZoomInbutton_Click(object sender, EventArgs e)
        {
            //Jai_FactoryWrapper.EFactoryError error = Jai_FactoryWrapper.EFactoryError.Success;
            if (myFactory.CameraList[0] != null)
                myFactory.CameraList[0].ZoomIn();
               

        }

        private void ZoomResetbutton_Click(object sender, EventArgs e)
        {
            if (myFactory.CameraList[0] != null)
                myFactory.CameraList[0].ZoomReset();
        }

        private void ZoomOutbutton_Click(object sender, EventArgs e)
        {
            if (myFactory.CameraList[0] != null)
                myFactory.CameraList[0].ZoomOut();
        }

        
     

    }
     
   }